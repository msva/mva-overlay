From 4c8a4d6e3f5b9d94241e4af643fce9c4d7d9fc8c Mon Sep 17 00:00:00 2001
From: John Preston <johnprestonmail@gmail.com>
Date: Mon, 5 Aug 2019 17:29:30 +0100
Subject: [PATCH] Add specific config.h.

---
 src/vector/config.h | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)
 create mode 100644 src/vector/config.h

diff --git a/src/vector/config.h b/src/vector/config.h
new file mode 100644
index 0000000..712b397
--- /dev/null
+++ b/src/vector/config.h
@@ -0,0 +1,16 @@
+#ifndef CONFIG_H
+#define CONFIG_H
+
+// enable threading
+#define LOTTIE_THREAD_SUPPORT
+
+//enable logging
+//#define LOTTIE_LOGGING_SUPPORT
+
+//enable module building of image loader
+#define LOTTIE_IMAGE_MODULE_SUPPORT
+
+//enable lottie model caching
+//#define LOTTIE_CACHE_SUPPORT
+
+#endif  // CONFIG_H

From 14167128d1064d0d82dfca9d6097ff2237874cf5 Mon Sep 17 00:00:00 2001
From: John Preston <johnprestonmail@gmail.com>
Date: Thu, 18 Jul 2019 11:22:27 +0200
Subject: [PATCH] Disable image loader code.

---
 src/vector/config.h         |  5 ++++-
 src/vector/vimageloader.cpp | 20 ++++++++++++++++++++
 2 files changed, 24 insertions(+), 1 deletion(-)

diff --git a/src/vector/config.h b/src/vector/config.h
index 712b397..528115b 100644
--- a/src/vector/config.h
+++ b/src/vector/config.h
@@ -8,9 +8,12 @@
 //#define LOTTIE_LOGGING_SUPPORT
 
 //enable module building of image loader
-#define LOTTIE_IMAGE_MODULE_SUPPORT
+//#define LOTTIE_IMAGE_MODULE_SUPPORT
 
 //enable lottie model caching
 //#define LOTTIE_CACHE_SUPPORT
 
+// disable image loader
+#define LOTTIE_IMAGE_MODULE_DISABLED
+
 #endif  // CONFIG_H
diff --git a/src/vector/vimageloader.cpp b/src/vector/vimageloader.cpp
index 03c269a..b4fd188 100644
--- a/src/vector/vimageloader.cpp
+++ b/src/vector/vimageloader.cpp
@@ -19,6 +19,24 @@ using lottie_image_free_f = void (*)(unsigned char *);
 extern "C" {
 #endif
 
+#ifdef LOTTIE_IMAGE_MODULE_DISABLED
+
+unsigned char *lottie_image_load(char const *filename, int *x, int *y,
+                                 int *comp, int req_comp)
+{
+    return nullptr;
+}
+unsigned char *lottie_image_load_from_data(const char *imageData, int len,
+                                           int *x, int *y, int *comp,
+                                           int req_comp)
+{
+    return nullptr;
+}
+
+void lottie_image_free(unsigned char *data) {}
+
+#else
+
 extern unsigned char *lottie_image_load(char const *filename, int *x, int *y,
                                         int *comp, int req_comp);
 extern unsigned char *lottie_image_load_from_data(const char *imageData,
@@ -26,6 +44,8 @@ extern unsigned char *lottie_image_load_from_data(const char *imageData,
                                                   int *comp, int req_comp);
 extern void           lottie_image_free(unsigned char *data);
 
+#endif
+
 #ifdef __cplusplus
 }
 #endif

From d08a03b6508b390af20491f2dbeee3453594afc8 Mon Sep 17 00:00:00 2001
From: John Preston <johnprestonmail@gmail.com>
Date: Wed, 7 Aug 2019 15:18:26 +0100
Subject: [PATCH] Allow passing a color replacement map.

---
 inc/rlottie.h                  |  4 ++-
 src/lottie/lottieanimation.cpp |  7 ++++--
 src/lottie/lottieloader.cpp    |  9 ++++---
 src/lottie/lottieloader.h      |  5 +++-
 src/lottie/lottieparser.cpp    | 45 ++++++++++++++++++++++++++++------
 src/lottie/lottieparser.h      |  4 ++-
 6 files changed, 59 insertions(+), 15 deletions(-)

diff --git a/inc/rlottie.h b/inc/rlottie.h
index 6066c62..1436539 100644
--- a/inc/rlottie.h
+++ b/inc/rlottie.h
@@ -291,7 +291,9 @@ class LOT_EXPORT Animation {
      */
     static std::unique_ptr<Animation>
     loadFromData(std::string jsonData, const std::string &key,
-                 const std::string &resourcePath="", bool cachePolicy=true);
+                 const std::string &resourcePath="", bool cachePolicy=true,
+	             const std::vector<std::pair<std::uint32_t, std::uint32_t>>
+				     &colorReplacements = {});
 
     /**
      *  @brief Returns default framerate of the Lottie resource.
diff --git a/src/lottie/lottieanimation.cpp b/src/lottie/lottieanimation.cpp
index be4d93e..58d1b13 100644
--- a/src/lottie/lottieanimation.cpp
+++ b/src/lottie/lottieanimation.cpp
@@ -240,7 +240,9 @@ std::future<Surface> AnimationImpl::renderAsync(size_t    frameNo,
  */
 std::unique_ptr<Animation> Animation::loadFromData(
     std::string jsonData, const std::string &key,
-    const std::string &resourcePath, bool cachePolicy)
+    const std::string &resourcePath, bool cachePolicy,
+    const std::vector<std::pair<std::uint32_t, std::uint32_t>>
+        &colorReplacements)
 {
     if (jsonData.empty()) {
         vWarning << "jason data is empty";
@@ -249,7 +251,8 @@ std::unique_ptr<Animation> Animation::loadFromData(
 
     LottieLoader loader;
     if (loader.loadFromData(std::move(jsonData), key,
-                            (resourcePath.empty() ? " " : resourcePath), cachePolicy)) {
+                            (resourcePath.empty() ? " " : resourcePath),
+                            cachePolicy, colorReplacements)) {
         auto animation = std::unique_ptr<Animation>(new Animation);
         animation->d->init(loader.model());
         return animation;
diff --git a/src/lottie/lottieloader.cpp b/src/lottie/lottieloader.cpp
index 82e21e3..8c06780 100644
--- a/src/lottie/lottieloader.cpp
+++ b/src/lottie/lottieloader.cpp
@@ -140,8 +140,11 @@ bool LottieLoader::load(const std::string &path, bool cachePolicy)
     return true;
 }
 
-bool LottieLoader::loadFromData(std::string &&jsonData, const std::string &key,
-                                const std::string &resourcePath, bool cachePolicy)
+bool LottieLoader::loadFromData(
+    std::string &&jsonData, const std::string &key,
+    const std::string &resourcePath, bool cachePolicy,
+    const std::vector<std::pair<std::uint32_t, std::uint32_t>>
+        &colorReplacements)
 {
     if (cachePolicy) {
         mModel = LottieModelCache::instance().find(key);
@@ -149,7 +152,7 @@ bool LottieLoader::loadFromData(std::string &&jsonData, const std::string &key,
     }
 
     LottieParser parser(const_cast<char *>(jsonData.c_str()),
-                        resourcePath.c_str());
+                        resourcePath.c_str(), colorReplacements);
     mModel = parser.model();
 
     if (!mModel) return false;
diff --git a/src/lottie/lottieloader.h b/src/lottie/lottieloader.h
index 4d4646d..711d0d6 100644
--- a/src/lottie/lottieloader.h
+++ b/src/lottie/lottieloader.h
@@ -21,6 +21,7 @@
 
 #include<sstream>
 #include<memory>
+#include<vector>
 
 class LOTModel;
 class LottieLoader
@@ -29,7 +30,9 @@ class LottieLoader
    static void configureModelCacheSize(size_t cacheSize);
    bool load(const std::string &filePath, bool cachePolicy);
    bool loadFromData(std::string &&jsonData, const std::string &key,
-                     const std::string &resourcePath, bool cachePolicy);
+                     const std::string &resourcePath, bool cachePolicy,
+                     const std::vector<std::pair<std::uint32_t, std::uint32_t>>
+                         &colorReplacements);
    std::shared_ptr<LOTModel> model();
 private:  
    std::shared_ptr<LOTModel>    mModel;
diff --git a/src/lottie/lottieparser.cpp b/src/lottie/lottieparser.cpp
index 19d6467..91fea5e 100644
--- a/src/lottie/lottieparser.cpp
+++ b/src/lottie/lottieparser.cpp
@@ -169,8 +169,14 @@ class LookaheadParserHandler {
 
 class LottieParserImpl : public LookaheadParserHandler {
 public:
-    LottieParserImpl(char *str, const char *dir_path)
-        : LookaheadParserHandler(str), mDirPath(dir_path) {}
+    LottieParserImpl(char *str, const char *dir_path,
+                     const std::vector<std::pair<std::uint32_t, std::uint32_t>>
+                         &colorReplacements)
+        : LookaheadParserHandler(str),
+          mColorReplacements(colorReplacements),
+          mDirPath(dir_path)
+    {
+    }
     bool VerifyType();
     bool ParseNext();
 public:
@@ -257,10 +263,13 @@ class LottieParserImpl : public LookaheadParserHandler {
     std::shared_ptr<VInterpolator> interpolator(VPointF, VPointF, std::string);
 
     LottieColor toColor(const char *str);
+    LottieColor applyReplacements(const LottieColor &color);
 
     void resolveLayerRefs();
 
 protected:
+    const std::vector<std::pair<std::uint32_t, std::uint32_t>>
+        &mColorReplacements;
     std::unordered_map<std::string, std::shared_ptr<VInterpolator>>
                                                mInterpolatorCache;
     std::shared_ptr<LOTCompositionData>        mComposition;
@@ -789,6 +798,27 @@ LottieColor LottieParserImpl::toColor(const char *str)
     tmp[1] = str[6];
     color.b = std::strtol(tmp, nullptr, 16) / 255.0f;
 
+    return applyReplacements(color);
+}
+
+LottieColor LottieParserImpl::applyReplacements(const LottieColor &color)
+{
+    if (mColorReplacements.empty()) {
+        return color;
+    }
+    const auto convert = [](float value) {
+        return std::uint32_t(std::round(std::clamp(value, 0.f, 1.f) * 255.));
+    };
+    const auto part = [](std::uint32_t value, int shift) {
+        return float((value >> shift) & 0xFFU) / 255.f;
+	};
+    const auto converted =
+        convert(color.b) | (convert(color.g) << 8) | (convert(color.r) << 16);
+    for (const auto [key, value] : mColorReplacements) {
+        if (key == converted) {
+            return LottieColor(part(value, 16), part(value, 8), part(value, 0));
+        }
+    }
     return color;
 }
 
@@ -1746,9 +1776,7 @@ void LottieParserImpl::getValue(LottieColor &color)
     while (NextArrayValue()) {
         val[i++] = GetDouble();
     }
-    color.r = val[0];
-    color.g = val[1];
-    color.b = val[2];
+    color = applyReplacements(LottieColor(val[0], val[1], val[2]));
 }
 
 void LottieParserImpl::getValue(LottieGradient &grad)
@@ -2254,8 +2282,11 @@ class LOTDataInspector {
 #endif
 
 LottieParser::~LottieParser() = default;
-LottieParser::LottieParser(char *str, const char *dir_path)
-    : d(std::make_unique<LottieParserImpl>(str, dir_path))
+LottieParser::LottieParser(
+    char *str, const char *dir_path,
+    const std::vector<std::pair<std::uint32_t, std::uint32_t>>
+        &colorReplacements)
+    : d(std::make_unique<LottieParserImpl>(str, dir_path, colorReplacements))
 {
     if (d->VerifyType())
         d->parseComposition();
diff --git a/src/lottie/lottieparser.h b/src/lottie/lottieparser.h
index 35a8417..06165f9 100644
--- a/src/lottie/lottieparser.h
+++ b/src/lottie/lottieparser.h
@@ -26,7 +26,9 @@ class LottieParserImpl;
 class LottieParser {
 public:
     ~LottieParser();
-    LottieParser(char* str, const char *dir_path);
+    LottieParser(char *str, const char *dir_path,
+                 const std::vector<std::pair<std::uint32_t, std::uint32_t>>
+                     &colorReplacements = {});
     std::shared_ptr<LOTModel> model();
 private:
    std::unique_ptr<LottieParserImpl>  d;
